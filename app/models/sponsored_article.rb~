class SponsoredArticle < ActiveRecord::Base
  extend Searchable
  validates_uri_existence_of :url, :with => /(^$)|(^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$)/ix,
 :message => "Format adresu jest niepoprawny lub taka strona nie istnieje (nie odpowiada)."
  has_one :auction, :as => :auctionable, :autosave => true, :dependent => :destroy
  has_many :categories, :through => :auction
  accepts_nested_attributes_for :auction, :allow_destroy => true
  attr_accessible :auction_attributes
  attr_accessible :url
  attr_accessible :pagerank
  attr_accessible :users_daily
  attr_accessible :word_number
  attr_accessible :number_of_links
  
  named_scope :active, :include => :auction, :condition => {'auctions.activated' => true }
  validate :check_before_update, :on => :update 
  def check_before_update
    if new_record?
      return true
    end
    @prev_stat = SponsoredArticle.find(id)
 #    kod Kuby!!!!!!
#    if !@prev_stat
#      errors.add(:s, "Taki rekord nie istnieje w bazie")
#      return false
#    end
    errors.add(:s, "Nie można zmienić pageranku") if @prev_stat.pagerank != pagerank
    errors.add(:s, "Nie można zmienić adresu strony") if @prev_stat.url != url
    errors.add(:s, "Nie można zmienić liczby dziennych użytkowników") if @prev_stat.users_daily != users_daily
    errors.add(:s, "Nie można zmienić aukcji produktu") if @prev_stat.auction != auction
    if auction.bids.not_cancelled.count > 0
      errors.add(:s, "Nie można zmienić liczby słów artykułu gdy są nieanulowane oferty") if @prev_stat.words_number != words_number
      errors.add(:s, "Nie można zmienić liczby linków w artykule gdy są nieanulowane oferty") if @prev_stat.number_of_links != number_of_links 
    end
    return errors.count == 0
  end
   def SponsoredArticle.searchObject(params)
    SponsoredArticleSearch.new(params)
  end
  named_scope :activated, { :joins => :auction, :conditions => { "auctions.activated" => true }}
  named_scope :order_scope , lambda{ |scope|
  { :order => scope }
  }
  
  named_scope :order_auction_scope , lambda{ |scope|
  { :conditions => "sponsored_articles.id=sponsored_articles.id", :joins => :auction, :order => scope }
  }
  named_scope :by_auctions_id, lambda{ |ids|    
    {
      :include => :auction,
      :conditions => ["auction.id IN (?)", ids]#.map(&:name)]
    }
   }
  named_scope :by_categories_id, lambda{ |*categories|
    {
      :select => "sponsored_articles.*",
      :joins => "INNER JOIN auctions as A ON auctionable_type = 'SponsoredArticle' AND auctionable_id = sponsored_articles.id INNER JOIN auctions_categories AS AC ON A.id = AC.auction_id INNER JOIN categories ON categories.id = AC.category_id",
      :conditions => ["categories.id IN (?)", categories]
    }
  }

  
   def polish_name
    "Artykuł sponsorowany"
  end
end


class SponsoredArticleSearch < Tableless

end
